---
esphome:
  name: "uhrsula"
  friendly_name: clock
  comment: esp8266-smartclock

# workaround: https://github.com/esphome/issues/issues/5949
external_components:
  # makes http_request work with content-length: -1
  - source: github://hlfcode/esphome/esphome@main
    components: [ http_request ]

substitutions:
  location_latitude: !secret location_latitude
  location_longitude: !secret location_longitude

esp8266:
  board: nodemcuv2
  restore_from_flash: True

# Enable logging
logger:
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot
  ap:

captive_portal:

# use the wifi LED as status
status_led:
  pin:
    number: D4
    inverted: True

# Example configuration entry
web_server:

# Activates prometheus /metrics endpoint
prometheus:

time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Berlin"

font:
  - file:
      type: local
      path: "weise-pixel.ttf"
    id: digit_font
    size: 8
    glyphs: " 0123456789:?"
  - file:
      type: local
      path: "weather-pixel.ttf"
    id: weather_font
    size: 8
    glyphs: "ABCDEFGHIJKL?"

# needed for led matrix
spi:
  clk_pin: D1
  mosi_pin: D3

display:
  - platform: max7219digit
    id: led_matrix
    scroll_enable: False
    cs_pin: D2
    num_chips: 4
    intensity: 0
    lambda: |-
      it.turn_on_off(id(display_status).state);
      it.intensity(id(esp8266_led_matrix_brightness).state);

      // time
      if (id(sntp_time).now().second % 2) {
        it.strftime(0, 1, id(digit_font), "%H:%M", id(sntp_time).now());
      } else {
        it.strftime(0, 1, id(digit_font), "%H %M", id(sntp_time).now());
      }

      // Seconds line (scaled to fit the matrix height)
      it.line(20, 8, 20, 8 - (id(sntp_time).now().second / 7.5));

      // draw weather with mapping
      std::string weather_str = id(weather_icon).state.c_str();
      /*std::map<std::string, std::string> weather_mapping =  {
        {"01d", "A"},
        {"01n", "B"},
        {"02d", "C"},
        {"02n", "D"},
        {"03d", "E"}, {"03n", "E"},
        {"04d", "F"}, {"04n", "F"},
        {"09d", "G"}, {"09n", "G"},
        {"10d", "H"},
        {"10n", "I"},
        {"11d", "J"}, {"11n", "J"},
        {"13d", "K"}, {"13n", "K"},
        {"50d", "L"}, {"50n", "L"}
      };*/
      // https://gist.github.com/stellasphere/9490c195ed2b53c707087c8c2db4ec0c
      std::map<std::string, std::string> weather_mapping =  {
        {"0", "A"}, {"1", "A"},
        // {"01n", "B"},
        {"2", "C"},
        // {"02n", "D"},
        {"3", "E"},
        // {"04d", "F"}, {"04n", "F"},
        {"80", "G"}, {"81", "G"}, {"82", "G"}, {"51", "G"}, {"53", "G"}, {"55", "G"}, {"56", "G"}, {"57", "G"},
        {"61", "H"}, {"63", "H"}, {"65", "H"}, {"66", "H"}, {"67", "H"},
        // {"10n", "I"},
        {"95", "J"}, {"96", "J"}, {"99", "J"},
        {"71", "K"}, {"73", "K"}, {"75", "K"}, {"77", "K"}, {"85", "K"}, {"86", "K"},
        {"45", "L"}, {"48", "L"}
      };
      if (weather_mapping.find(weather_str) != weather_mapping.end()) {
        it.print(24, 1, id(weather_font), weather_mapping[weather_str].c_str());
      } else {
        it.print(24, 1, id(weather_font), "?");
      }

sensor:
  - platform: dht
    pin: D5
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"

##########
# inputs #
###########

number:
  - platform: template
    name: "Display Brightness"
    id: "esp8266_led_matrix_brightness"
    icon: mdi:brightness-6
    optimistic: True
    restore_value: True
    min_value: 0
    max_value: 15
    step: 1

switch:
  - platform: template
    name: "Display"
    id: display_status
    icon: mdi:data-matrix
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON

# adjust display brightness by day-light
sun:
  latitude: ${location_latitude}
  longitude: ${location_longitude}

  on_sunrise:
    - then:
      - number.set:
          id: esp8266_led_matrix_brightness
          value: 15
  on_sunset:
    - then:
      - number.set:
          id: esp8266_led_matrix_brightness
          value: 0

###########
# Weather #
###########

http_request:
  useragent: esphome
  timeout: 10s
  verify_ssl: False

text_sensor:
  - platform: template
    id: weather_icon
    name: "Weather icon"
    icon: mdi:weather-partly-snowy
    internal: True

interval:
  - interval: 5min
    then:
      - http_request.get:
          url: !lambda |-
            std::string url = "https://api.open-meteo.com/v1/forecast?";
            url += "latitude=" + std::string("${location_latitude}");
            url += "&longitude=" + std::string("${location_longitude}");
            url += "&timezone=Europe%2FBerlin&hourly=weather_code&forecast_days=1";
            return url;
          capture_response: True
          on_response:
            then:
              - if:
                  condition:
                      lambda: return response->status_code == 200;
                  then:
                    - lambda: |-
                        ESP_LOGI("main", "Response: %s", body.c_str());
                        json::parse_json(body, [](JsonObject root) -> bool {
                          auto weather_code = root["hourly"]["weather_code"];
                          if (!weather_code.isNull() && weather_code[id(sntp_time).now().hour].is<uint8_t>()) {
                            id(weather_icon).publish_state(std::to_string(weather_code[id(sntp_time).now().hour].as<uint8_t>()));
                          } else {
                            ESP_LOGE("json", "Unable to parse weather code");
                          }
                          return true;
                        });
                  else:
                    - logger.log:
                        format: "Error: Response status: %d, message %s"
                        args: [ 'response->status_code', 'body.c_str()' ]
